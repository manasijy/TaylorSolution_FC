tic
clear

%%
% gvector = [20,45,50];
% e_ext =[1,0,0;0,0,0;0,0,-1];



%%

load('SlipSystem24.mat','SlipSystem'); 
A = [[SlipSystem(1).m.M(1,1) , SlipSystem(2).m.M(1,1) , SlipSystem(3).m.M(1,1)...
     , SlipSystem(4).m.M(1,1),SlipSystem(5).m.M(1,1),SlipSystem(6).m.M(1,1)...
     ,SlipSystem(7).m.M(1,1),SlipSystem(8).m.M(1,1),SlipSystem(9).m.M(1,1)...
     ,SlipSystem(10).m.M(1,1),SlipSystem(11).m.M(1,1),SlipSystem(12).m.M(1,1)...
     ,SlipSystem(13).m.M(1,1) , SlipSystem(14).m.M(1,1) , SlipSystem(15).m.M(1,1)...
     , SlipSystem(16).m.M(1,1),SlipSystem(17).m.M(1,1),SlipSystem(18).m.M(1,1)...
     ,SlipSystem(19).m.M(1,1),SlipSystem(20).m.M(1,1),SlipSystem(21).m.M(1,1)...
     ,SlipSystem(22).m.M(1,1),SlipSystem(23).m.M(1,1),SlipSystem(24).m.M(1,1);
 SlipSystem(1).m.M(2,2) , SlipSystem(2).m.M(2,2) , SlipSystem(3).m.M(2,2)...
     , SlipSystem(4).m.M(2,2),SlipSystem(5).m.M(2,2),SlipSystem(6).m.M(2,2)...
     ,SlipSystem(7).m.M(2,2),SlipSystem(8).m.M(2,2),SlipSystem(9).m.M(2,2)...
     ,SlipSystem(10).m.M(2,2),SlipSystem(11).m.M(2,2),SlipSystem(12).m.M(2,2)...
     SlipSystem(13).m.M(2,2) , SlipSystem(14).m.M(2,2) , SlipSystem(15).m.M(2,2)...
     , SlipSystem(16).m.M(2,2),SlipSystem(17).m.M(2,2),SlipSystem(18).m.M(2,2)...
     ,SlipSystem(19).m.M(2,2),SlipSystem(20).m.M(2,2),SlipSystem(21).m.M(2,2)...
     ,SlipSystem(22).m.M(2,2),SlipSystem(23).m.M(2,2),SlipSystem(24).m.M(2,2)];
 2*[SlipSystem(1).m.M(2,3) , SlipSystem(2).m.M(2,3) , SlipSystem(3).m.M(2,3)...
     , SlipSystem(4).m.M(2,3),SlipSystem(5).m.M(2,3),SlipSystem(6).m.M(2,3)...
     ,SlipSystem(7).m.M(2,3),SlipSystem(8).m.M(2,3),SlipSystem(9).m.M(2,3)...
     ,SlipSystem(10).m.M(2,3),SlipSystem(11).m.M(2,3),SlipSystem(12).m.M(2,3)...
     ,SlipSystem(13).m.M(2,3) , SlipSystem(14).m.M(2,3) , SlipSystem(15).m.M(2,3)...
     , SlipSystem(16).m.M(2,3),SlipSystem(17).m.M(2,3),SlipSystem(18).m.M(2,3)...
     ,SlipSystem(19).m.M(2,3),SlipSystem(20).m.M(2,3),SlipSystem(21).m.M(2,3)...
     ,SlipSystem(22).m.M(2,3),SlipSystem(23).m.M(2,3),SlipSystem(24).m.M(2,3);
SlipSystem(1).m.M(1,3) , SlipSystem(2).m.M(1,3) , SlipSystem(3).m.M(1,3)...
     , SlipSystem(4).m.M(1,3),SlipSystem(5).m.M(1,3),SlipSystem(6).m.M(1,3)...
     ,SlipSystem(7).m.M(1,3),SlipSystem(8).m.M(1,3),SlipSystem(9).m.M(1,3)...
     ,SlipSystem(10).m.M(1,3),SlipSystem(11).m.M(1,3),SlipSystem(12).m.M(1,3)...
     ,SlipSystem(13).m.M(1,3) , SlipSystem(14).m.M(1,3) , SlipSystem(15).m.M(1,3)...
     , SlipSystem(16).m.M(1,3),SlipSystem(17).m.M(1,3),SlipSystem(18).m.M(1,3)...
     ,SlipSystem(19).m.M(1,3),SlipSystem(20).m.M(1,3),SlipSystem(21).m.M(1,3)...
     ,SlipSystem(22).m.M(1,3),SlipSystem(23).m.M(1,3),SlipSystem(24).m.M(1,3);
SlipSystem(1).m.M(1,2) , SlipSystem(2).m.M(1,2) , SlipSystem(3).m.M(1,2)...
     , SlipSystem(4).m.M(1,2),SlipSystem(5).m.M(1,2),SlipSystem(6).m.M(1,2)...
     ,SlipSystem(7).m.M(1,2),SlipSystem(8).m.M(1,2),SlipSystem(9).m.M(1,2)...
     ,SlipSystem(10).m.M(1,2),SlipSystem(11).m.M(1,2),SlipSystem(12).m.M(1,2)...
     ,SlipSystem(13).m.M(1,2) , SlipSystem(14).m.M(1,2) , SlipSystem(15).m.M(1,2)...
     , SlipSystem(16).m.M(1,2),SlipSystem(17).m.M(1,2),SlipSystem(18).m.M(1,2)...
     ,SlipSystem(19).m.M(1,2),SlipSystem(20).m.M(1,2),SlipSystem(21).m.M(1,2)...
     ,SlipSystem(22).m.M(1,2),SlipSystem(23).m.M(1,2),SlipSystem(24).m.M(1,2);... 
    ]];
c = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
k = 0;
tol=1e-10; 
maxit=50; 
%%

prompt = 'The euler angle file name with .txt extension \n';
g_file = input(prompt);                      
g = fopen(g_file);   
g_matrix = textscan(g, '%f %f %f'); 
fclose(g);
gmatrix = euler2quat(g_matrix{1,1},g_matrix{1,2},g_matrix{1,3},'Bunge'); % gmatrix is now in quaternions
lg =  length(g_matrix);
e_ext= [1,0,0;0,0,0;0,0,-1];
DCMtrx = (matrix(gmatrix))'; 
% we need contravarient transformation that is why transpose. q represented covarient ie axes transformation
% DCMtrx = DC_matrix_function(gvector(1),gvector(2),gvector(3));
% [e_grain]= transform_e_function(e_ext,DCMtrx);
for i=1:1:numel(gmatrix), 
    e_grain=DCMtrx(i)'*e_ext*DCMatrx(i);
    b(i) = [e_grain(1,1);e_grain(2,2);2*e_grain(2,3);2*e_grain(1,3);2*e_grain(1,2)]; 
end




max_strain = 1;
incr_e = 0.1; % incremental strain per step
n_steps = max_strain/incr_e;


        
%% 
for i=1:1:n_steps
    
    spin = calcPlasticSpin(gmatrix,e_ext,A,c,tol,maxit);
    rot = matrix2quat(spin);    
    newODF(i) = rotate(ODF,rot); 
    
%     newODF = gmultiply(odf,rot);% gmultiply[phi1_1 phi_1 phi2_1; phi1_2 phi_2 phi2_2],[quat1;quat2])

end


%%  Conversion back to euler angles if needed

[phi1,Phi,phi2] = Euler(newODF,'Bunge');

%%
%% for one g vector

% OP = LP_function(g,e_ext);
% TaylorSolution = treeSol_function(OP,A,b);

toc